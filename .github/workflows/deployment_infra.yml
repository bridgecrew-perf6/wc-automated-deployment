name: Word Counter Build and Deployment 

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  check_changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      deployment_infra: ${{ steps.filter.outputs.deployment_infra }}
      word_count: ${{ steps.filter.outputs.word_count }}
      action_script: ${{ steps.filter.outputs.action_script }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: "main"
          filters: |
            word_count:
              - 'word_count/**'
            deployment_infra:
              - 'deployment_infra/**'
            action_script:
              - '.github/workflows/**'


  create_infrastructure:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.deployment_infra == 'true' }} || ${{ needs.check_changes.outputs.action_script == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    outputs:
      instance_id: ${{ steps.get_instance_id.outputs.stdout }}

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Init Terraform
        working-directory: deployment_infra
        run: terraform init -backend-config="access_key=${{ secrets.WC_TF_AWS_ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.WC_TF_AWS_SECRET_KEY }}"

      - name: Apply Terraform
        id: tf_apply  
        working-directory: deployment_infra
        run: | 
          terraform apply -no-color -auto-approve \
          -var="aws_access_key=${{ secrets.WC_TF_AWS_ACCESS_KEY }}" \
          -var="aws_secret_key=${{ secrets.WC_TF_AWS_SECRET_KEY }}" \
          -var="password=${{ secrets.WC_SSH_PASSWORD }}"
      - id: get_instance_id
        working-directory: deployment_infra
        run: terraform output -raw instance_id
      

  configure_vm:
    needs: [check_changes, create_infrastructure]
    if: ${{ needs.check_changes.outputs.deployment_infra == 'true' }} || ${{ needs.check_changes.outputs.action_script == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: us-east-1
          aws-access-key-id: "${{ secrets.WC_TF_AWS_ACCESS_KEY }}"
          aws-secret-access-key: "${{ secrets.WC_TF_AWS_SECRET_KEY }}"
          instance-ids: ${{ needs.create_infrastructure.outputs.instance_id }}

          working-directory: /home/ec2-user
          command: | 
            sudo yum update -y
            sudo yum install docker -y
            sudo usermod -a -G docker ec2-user
            newgrp docker
            sudo systemctl enable docker.service
            sudo systemctl start docker.service
            sudo amazon-linux-extras enable docker
            sudo yum install amazon-ecr-credential-helper -y
          comment: Install Docker

      # Catch SSM outputs
      - name: Get the outputs
        run: echo "The Command id is ${{ steps.ssm.outputs.command-id }}"

  build:
    needs: [check_changes, create_infrastructure, configure_vm]
    if: ${{ needs.check_changes.outputs.word_count == 'true' }} || ${{ needs.check_changes.outputs.action_script == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3
      # - name: Set current date as env variable
      #   run: echo "BUILD_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
      # - name: "Download zip file"
      #   if: ${{ github.event.inputs.text_files_zip_url != '' }}
      #   run: | 
      #     wget ${{ github.event.inputs.text_files_zip_url }}
      #     unzip $(basename ${{ github.event.inputs.text_files_zip_url }}) -d word_count/input_files/
      #     ls -la word_count/input_files/
      # - name: Build the Docker image
      #   working-directory: ./word_count
      #   run: docker build . --tag "wc-python:${{env.BUILD_TIMESTAMP}}"
      # - name: Run docker image
      #   run: docker run "wc-python:${{env.BUILD_TIMESTAMP}}"
      #     - name: Check out code
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WC_TF_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.WC_TF_AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wc-python
          IMAGE_TAG: latest
        working-directory: ./word_count
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
