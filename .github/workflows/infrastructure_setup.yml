name: Word Counter Build and Deployment 

on:
  workflow_dispatch:

jobs:

  create_infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    outputs:
      instance_id: ${{ steps.get_instance_id.outputs.stdout }}

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Init Terraform
        working-directory: deployment_infra
        run: terraform init -backend-config="access_key=${{ secrets.WC_TF_AWS_ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.WC_TF_AWS_SECRET_KEY }}"

      - name: Apply Terraform
        id: tf_apply  
        working-directory: deployment_infra
        run: | 
          terraform apply -no-color -auto-approve \
          -var="aws_access_key=${{ secrets.WC_TF_AWS_ACCESS_KEY }}" \
          -var="aws_secret_key=${{ secrets.WC_TF_AWS_SECRET_KEY }}" \
          -var="password=${{ secrets.WC_SSH_PASSWORD }}"
      - id: get_instance_id
        working-directory: deployment_infra
        run: terraform output -raw instance_id
  

  release_image:
    needs: [create_infrastructure]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    outputs:
      ecr_registry: "${{ steps.login_ecr.outputs.registry }}"

    steps:
      - uses: actions/checkout@v3
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          mask-aws-account-id: no
          aws-access-key-id: ${{ secrets.WC_TF_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.WC_TF_AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          ECR_REPOSITORY: wc-python
          IMAGE_TAG: latest
        working-directory: ./word_count
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  configure_vm:
    needs: [create_infrastructure, release_image]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - run: echo "${{ needs.release_image.outputs.ecr_registry }}"
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: us-east-1
          aws-access-key-id: "${{ secrets.WC_TF_AWS_ACCESS_KEY }}"
          aws-secret-access-key: "${{ secrets.WC_TF_AWS_SECRET_KEY }}"
          instance-ids: ${{ needs.create_infrastructure.outputs.instance_id }}

          working-directory: /home/ec2-user
          command: | 
            sudo su
            yum update -y
            yum install docker -y
            usermod -a -G docker ec2-user
            newgrp docker
            systemctl enable docker.service
            systemctl start docker.service
            amazon-linux-extras enable docker
            yum install amazon-ecr-credential-helper -y
            mkdir -p /home/ec2-user/.docker/
            export AWS_ECR_DISABLE_CACHE=true
            echo "{ \"credsStore\": \"ecr-login\" }" > ~/.docker/config.json
            systemctl restart docker.service
          comment: Install Docker and Set Registry Authentication Helper
